#!/bin/bash
#
# run-vm
#
# (C) Stephen Bates <sbates@raithlin>
#
# A simple script to run a VM that was (probably) generated using the
# gen-vm script. Note that to pass in a host filesystem you need to
# run something like:
#
# sudo mount -t 9p -o trans=virtio hostfs /home/batesste/Projects -oversion=9p2000.L
#
# In the guest. For some reason -t virtfs does not work when running
# qemu directly but it does work when running via libvirt. Go figure!
#
# Change NVME in order to add an emulated NVMe SSD to the VM. The
# arguments used for this NVMe SSD is the argument given at the
# command line or if "true" is given we do a simple null backed
# drive. You can insert a null_blk device into the kernel using a
# command like:
#
# sudo modprobe null_blk queue_mode=2 gb=1024
#

VM_NAME=${VM_NAME:-qemu-minimal}
ARCH=${ARCH:-amd64}
VCPUS=${VCPUS:-2}
VMEM=${VMEM:-4096}
FILESYSTEM=${FILESYSTEM:-none}
IMAGES=${IMAGES:-../images}
SSH_PORT=${SSH_PORT:-2222}
KVM=${KVM:-enable}
NVME=${NVME:-none}

if [ ${KVM} == "enable" ]; then
    KVM=",accel=kvm"
else
    KVM=""
fi

if [ ${FILESYSTEM} == "none" ]; then
    FILESYSTEM_ARGS=""
else
    FILESYSTEM_ARGS="-object memory-backend-memfd,id=mem,size=2G -virtfs local,path=${FILESYSTEM},security_model=passthrough,mount_tag=hostfs "
fi

if [ ${ARCH} == "amd64" ]; then
    QARCH="x86_64"
    QARCH_ARGS="-machine q35${KVM}"
elif [ ${ARCH} == "arm64" ]; then
    QARCH="aarch64"
    QARCH_ARGS="-machine virt,gic-version=max${KVM} -cpu max -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd"
elif [ ${ARCH} == "riscv64" ]; then
    QARCH="riscv64"
    QARCH_ARGS="-machine virt,${KVM} -kernel /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf"
else
    echo "Error: No ARCH mapping exists for ${ARCH}! Exiting."; exit -1
fi

if [ ${NVME} == "none" ]; then
    NVME_ARGS=""
elif [ ${NVME} == "true" ]; then
    NVME_ARGS="-drive file=/dev/nullb0,format=raw,if=none,id=nvm-1 -device nvme,serial=amd-rocks,drive=nvm-1 "
else
    NVME_ARGS=${NVME}
fi

qemu-system-${QARCH} \
   ${QARCH_ARGS} \
   -smp cpus=${VCPUS} \
   -m ${VMEM} \
   ${FILESYSTEM_ARGS} \
   -nographic \
   ${NVME_ARGS} \
   -drive if=virtio,format=qcow2,file=${IMAGES}/${VM_NAME}.qcow2 \
   -netdev user,id=net0,hostfwd=tcp::${SSH_PORT}-:22 \
   -device virtio-net-pci,netdev=net0
