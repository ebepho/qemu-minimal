#!/bin/bash
#
# create-name
#
# (C) Stephen Bates <sbates@raithlin>
#
# A simple script to generate a ton of fake NVMe SSDS inside a libvirt
# VM. This script generates the files used to back the SSDs as well as
# a section of XML that should be added to the libvirt XML description
# of the VM. You also need to add the QEMU schema [1] and you might
# need to play with apparmor to make this all work.
#
# Note that if you set DIR=null we don't create backing files for the
# NVMe SSDs and instead use the null block driver inside QEMU. This
# leads to improved performance but obviously no actual storage. Note
# that by default the created NVMe backing files are placed in the
# libvirt folder and permissions are set as per libvirt requirements.
#
# [1] http://blog.vmsplice.net/2011/04/how-to-pass-qemu-command-line-options.html
# [2] https://bugs.launchpad.net/ubuntu/+source/libvirt/+bug/1772936
#
# Add this to your domain at the top:
# xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'
#
# Note that for apparmor to work you may need to put something like
#   /var/lib/libvirt/images/* rwk,
# into /etc/apparmor.d/abstractions/libvirt-qemu and restart the
# libvirtd service.
#
# Note that in more recent versions of QEMU a locking mechanism was
# added to the image files. If you get errors of the form
#   Failed to unlock byte 100
# then use the ADD_LOCKING=yes option. Note this may cause issues
# migrating (but should not as migrating to older libvirtd machines
# should normally fail anyway).
#
# Also note that since Ubuntu 24.04 the versions of QEMU and libvirt
# require a specifc PCIe bus address. I am not quite sure why that is
# yet but we add that now. If you get errors along the lines of
#   error: Failed to start domain 'batesste-test-vm'
#   error: internal error: QEMU unexpectedly closed the monitor \
#     (vm='batesste-test-vm'): 2024-11-09T20:58:02.900957Z \
#     qemu-system-x86_64: -device nvme,drive=nvme1,serial=nvme1,\
#     cmb_size_mb=0,bus=pcie.0,addr=6: PCI: slot 6 function 0 \
#     not available for nvme, in use by nvme,id=(null)
# you may need to play with the bus and address offsets.


NUM=${NUM:-24}
DIR=${DIR:-/var/lib/libvirt/images}
SIZE=${SIZE:-128M}
CMB=${CMB:-0}
CREATE=${CREATE:-no}
PREFIX=${PREFIX:-none}
ADD_LOCKING=${ADD_LOCKING:-no}
START_ADDR=${START_ADDR:-6}

if [ $PREFIX != "none" ]; then
    PREFIX="${PREFIX}-"
else
    PREFIX=""
fi

  # Create the qcow2 image files for the NVMe SSDs.

if [ $CREATE == "yes" ]; then
    if [ ! -d $DIR ]; then
	echo "$DIR does not exist!"
	exit -1
    fi
    echo "Creating qcow2 image files for NVMe..."
    i=0
    while [ $i -lt $NUM ]; do
	if [ -f ${DIR}/${PREFIX}nvme${i}.qcow2 ]; then
	    echo "${DIR}/${PREFIX}nvme${i}.qcow2 already exists!"
	    exit -1
	fi
	qemu-img create -f qcow2 ${DIR}/${PREFIX}nvme${i}.qcow2 ${SIZE} > /dev/null
	((i++))
    done
    chown libvirt-qemu:kvm ${DIR}/${PREFIX}nvme*.*
    chmod 644 ${DIR}/${PREFIX}nvme*.*
    ls -lrth ${DIR}
fi

if [ $DIR != "null" ] && [ $ADD_LOCKING == "yes" ]; then
    ADD_LOCKING="file.locking=off,"
else
    ADD_LOCKING=""
fi

  # Echo the XML output for virsh edit

echo
echo "# Add this to your domain entry at the top of the xml:"
echo "# xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'"
echo
i=0
j=${START_ADDR}
echo "  <qemu:commandline>"
while [ $i -lt $NUM ]; do
    echo "    <qemu:arg value='-drive'/>"
    if [ $DIR == "null" ]; then
	echo "    <qemu:arg value='file=null-aio://,if=none,size=${SIZE},id=nvme${i},format=null-aio'/>"
    else
	echo "    <qemu:arg value='file=${DIR}/${PREFIX}nvme${i}.qcow2,if=none,id=nvme${i},${ADD_LOCKING}format=qcow2'/>"
    fi
    echo "    <qemu:arg value='-device'/>"
    echo "    <qemu:arg value='nvme,drive=nvme${i},serial=nvme${i},cmb_size_mb=${CMB},bus=pcie.0,addr=${j}'/>"
    ((i++))
    ((j++))
done
echo "  </qemu:commandline>"
